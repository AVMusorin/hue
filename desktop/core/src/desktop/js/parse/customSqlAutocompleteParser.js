// Licensed to Cloudera, Inc. under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  Cloudera, Inc. licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
import SqlParseSupport from 'parse/sqlParseSupport';

var customSqlAutocompleteParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[6,10,37,38,97],$V1=[2,4],$V2=[6,10],$V3=[2,5],$V4=[1,11],$V5=[1,12],$V6=[1,14],$V7=[2,36],$V8=[1,69],$V9=[1,70],$Va=[1,30],$Vb=[1,33],$Vc=[1,25],$Vd=[1,32],$Ve=[1,31],$Vf=[1,63],$Vg=[1,64],$Vh=[1,68],$Vi=[1,61],$Vj=[1,60],$Vk=[1,29],$Vl=[1,39],$Vm=[1,65],$Vn=[1,66],$Vo=[1,37],$Vp=[1,38],$Vq=[1,42],$Vr=[1,62],$Vs=[6,10,97],$Vt=[2,134],$Vu=[1,82],$Vv=[1,96],$Vw=[1,99],$Vx=[1,98],$Vy=[1,87],$Vz=[1,86],$VA=[1,88],$VB=[1,97],$VC=[1,91],$VD=[1,93],$VE=[1,90],$VF=[1,104],$VG=[1,105],$VH=[1,95],$VI=[1,89],$VJ=[1,101],$VK=[6,10,23,37,106],$VL=[6,10,106],$VM=[2,317],$VN=[1,117],$VO=[1,116],$VP=[1,111],$VQ=[1,110],$VR=[1,112],$VS=[1,115],$VT=[1,118],$VU=[1,114],$VV=[1,125],$VW=[1,119],$VX=[1,109],$VY=[1,113],$VZ=[2,285],$V_=[6,10,23,106],$V$=[1,138],$V01=[1,137],$V11=[1,132],$V21=[1,131],$V31=[1,133],$V41=[1,136],$V51=[1,139],$V61=[1,135],$V71=[1,134],$V81=[1,140],$V91=[1,141],$Va1=[2,6,10,16,17,21,22,23,24,26,27,28,32,33,34,37,40,45,53,89,90,106,115,116,121,155],$Vb1=[1,148],$Vc1=[1,152],$Vd1=[2,6,10,16,17,21,22,23,24,26,27,28,32,33,34,40,45,53,90,106,121,155],$Ve1=[2,245],$Vf1=[1,161],$Vg1=[2,255],$Vh1=[2,6,10,16,17,20,21,22,23,24,26,27,28,32,33,34,37,40,45,53,68,89,90,106,115,116,121,155],$Vi1=[2,120],$Vj1=[1,172],$Vk1=[1,171],$Vl1=[1,174],$Vm1=[1,175],$Vn1=[2,6,10,16,17,20,21,22,23,24,26,27,28,32,33,34,35,37,40,45,53,68,69,71,87,89,90,106,115,116,121,155],$Vo1=[1,177],$Vp1=[1,178],$Vq1=[1,182],$Vr1=[2,154],$Vs1=[1,198],$Vt1=[1,214],$Vu1=[1,232],$Vv1=[1,231],$Vw1=[1,226],$Vx1=[1,225],$Vy1=[1,227],$Vz1=[1,230],$VA1=[1,233],$VB1=[1,229],$VC1=[1,224],$VD1=[1,228],$VE1=[1,239],$VF1=[118,119,120],$VG1=[2,282],$VH1=[6,10,23,35,37,106],$VI1=[6,10,16,17,21,23,32,34,37,40,45,53,89,106,115,155],$VJ1=[2,162],$VK1=[2,6,10,16,17,21,23,32,34,40,45,53,90,106,155],$VL1=[1,292],$VM1=[2,163],$VN1=[2,164],$VO1=[6,10,16,17,21,22,23,24,26,27,28,32,33,34,37,40,45,53,89,106,115,121,155],$VP1=[2,165],$VQ1=[1,293],$VR1=[1,296],$VS1=[1,295],$VT1=[1,298],$VU1=[1,305],$VV1=[1,309],$VW1=[1,313],$VX1=[2,6,10,16,17,21,22,23,24,26,27,28,32,33,34,35,37,40,45,53,89,90,106,115,116,121,155],$VY1=[1,322],$VZ1=[2,155],$V_1=[2,148],$V$1=[6,10,35],$V02=[6,10,23,35,37],$V12=[6,10,23,35],$V22=[6,10,16,17,23,35,37,40,45,53,155],$V32=[6,10,16,17,23,35,40,45,53,155],$V42=[2,74],$V52=[1,344],$V62=[2,6,10,16,17,21,23,32,34,40,45,53,89,90,106,155],$V72=[2,6,10,16,17,21,22,23,24,26,27,28,32,33,34,40,45,53,89,90,106,121,155],$V82=[2,283],$V92=[6,10,16,17,21,23,26,27,28,32,34,37,40,45,53,89,106,115,121,155],$Va2=[2,170],$Vb2=[2,6,10,16,17,21,23,26,27,28,32,34,40,45,53,90,106,121,155],$Vc2=[2,171],$Vd2=[2,172],$Ve2=[2,173],$Vf2=[6,10,16,17,21,23,32,34,37,40,45,53,89,106,155],$Vg2=[2,174],$Vh2=[2,175],$Vi2=[2,176],$Vj2=[2,177],$Vk2=[2,178],$Vl2=[2,6,10,16,17,21,22,23,24,26,27,28,32,33,34,35,40,45,53,68,90,106,121,155],$Vm2=[1,366],$Vn2=[21,23,37],$Vo2=[2,231],$Vp2=[2,21],$Vq2=[1,376],$Vr2=[1,377],$Vs2=[6,10,37],$Vt2=[2,159],$Vu2=[2,6,10,16,17,21,23,26,27,28,32,34,40,45,53,89,90,106,121,155],$Vv2=[1,393],$Vw2=[2,21,23],$Vx2=[2,6,10,16,17,21,22,23,24,26,27,28,32,33,34,40,45,53,68,90,106,121,155],$Vy2=[2,75],$Vz2=[1,406],$VA2=[2,232];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"SqlSyntax":3,"NewStatement":4,"SqlStatements":5,"EOF":6,"SqlAutocomplete":7,"SqlStatements_EDIT":8,"SqlStatement":9,";":10,"SqlStatement_EDIT":11,"QuerySpecification":12,"AnyCursor":13,"QuerySpecification_EDIT":14,"RegularIdentifier":15,"REGULAR_IDENTIFIER":16,"NonReservedKeyword":17,"NonStartingToken":18,"!":19,"(":20,")":21,"*":22,",":23,"-":24,".":25,"<":26,"=":27,">":28,"[":29,"]":30,"~":31,"AND":32,"ARITHMETIC_OPERATOR":33,"OR":34,"WHERE":35,"Commas":36,"CURSOR":37,"PARTIAL_CURSOR":38,"SingleQuotedValue":39,"SINGLE_QUOTE":40,"VALUE":41,"SingleQuotedValue_EDIT":42,"PARTIAL_VALUE":43,"DoubleQuotedValue":44,"DOUBLE_QUOTE":45,"DoubleQuotedValue_EDIT":46,"QuotedValue":47,"QuotedValue_EDIT":48,"PartialBacktickedOrAnyCursor":49,"PartialBacktickedIdentifier":50,"PartialBacktickedOrCursor":51,"PartialBacktickedOrPartialCursor":52,"BACKTICK":53,"RightParenthesisOrError":54,"OptionalParenthesizedColumnList":55,"ParenthesizedColumnList":56,"OptionalParenthesizedColumnList_EDIT":57,"ParenthesizedColumnList_EDIT":58,"ColumnList":59,"ColumnList_EDIT":60,"ColumnIdentifier":61,"ColumnIdentifier_EDIT":62,"ParenthesizedSimpleValueList":63,"SimpleValueList":64,"UnsignedValueSpecification":65,"SchemaQualifiedTableIdentifier":66,"RegularOrBacktickedIdentifier":67,"AnyDot":68,"ImpalaFields":69,"SchemaQualifiedTableIdentifier_EDIT":70,"ImpalaFields_EDIT":71,"SchemaQualifiedIdentifier":72,"SchemaQualifiedIdentifier_EDIT":73,"DatabaseIdentifier":74,"DatabaseIdentifier_EDIT":75,"RegularOrBackTickedSchemaQualifiedName":76,"RegularOrBackTickedSchemaQualifiedName_EDIT":77,"LocalOrSchemaQualifiedName":78,"LocalOrSchemaQualifiedName_EDIT":79,"ColumnReference":80,"BasicIdentifierChain":81,"ColumnReference_EDIT":82,"BasicIdentifierChain_EDIT":83,"DerivedColumnChain":84,"DerivedColumnChain_EDIT":85,"PartialBacktickedIdentifierOrPartialCursor":86,"HiveOrImpalaLeftSquareBracket":87,"ValueExpression":88,"HiveOrImpalaRightSquareBracket":89,"HiveOrImpalaRightSquareBracketOrError":90,"ValueExpression_EDIT":91,"OptionalTypeLength":92,"UNSIGNED_INTEGER":93,"OptionalTypePrecision":94,"SelectStatement":95,"SelectStatement_EDIT":96,"SELECT":97,"SelectList":98,"TableExpression":99,"SelectList_EDIT":100,"TableExpression_EDIT":101,"FromClause":102,"OptionalSelectConditions":103,"FromClause_EDIT":104,"OptionalSelectConditions_EDIT":105,"FROM":106,"TableReferenceList":107,"TableReferenceList_EDIT":108,"OptionalWhereClause":109,"WhereClause_EDIT":110,"WhereClause":111,"SearchCondition":112,"SearchCondition_EDIT":113,"NonParenthesizedValueExpressionPrimary":114,"NOT":115,"IS":116,"OptionalNot":117,"NULL":118,"TRUE":119,"FALSE":120,"COMPARISON_OPERATOR":121,"NonParenthesizedValueExpressionPrimary_EDIT":122,"ValueExpressionList":123,"ValueExpressionList_EDIT":124,"ColumnOrArbitraryFunctionRef":125,"ArbitraryFunctionRightPart":126,"ArbitraryFunctionName":127,"UserDefinedFunction":128,"UnsignedValueSpecification_EDIT":129,"ColumnOrArbitraryFunctionRef_EDIT":130,"ArbitraryFunctionRightPart_EDIT":131,"UserDefinedFunction_EDIT":132,"SignedInteger":133,"UnsignedNumericLiteral":134,"+":135,"UnsignedLiteral":136,"UnsignedLiteral_EDIT":137,"GeneralLiteral":138,"GeneralLiteral_EDIT":139,"ExactNumericLiteral":140,"ApproximateNumericLiteral":141,"UNSIGNED_INTEGER_E":142,"TruthValue":143,"SelectSpecification":144,"OptionalCorrelationName":145,"SelectSpecification_EDIT":146,"AnyAs":147,"OptionalCorrelationName_EDIT":148,"TableReference":149,"TableReference_EDIT":150,"TablePrimary":151,"TablePrimary_EDIT":152,"TableOrQueryName":153,"TableOrQueryName_EDIT":154,"AS":155,"ArbitraryFunction":156,"ArbitraryFunction_EDIT":157,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",10:";",16:"REGULAR_IDENTIFIER",17:"NonReservedKeyword",19:"!",20:"(",21:")",22:"*",23:",",24:"-",25:".",26:"<",27:"=",28:">",29:"[",30:"]",31:"~",32:"AND",33:"ARITHMETIC_OPERATOR",34:"OR",35:"WHERE",37:"CURSOR",38:"PARTIAL_CURSOR",40:"SINGLE_QUOTE",41:"VALUE",43:"PARTIAL_VALUE",45:"DOUBLE_QUOTE",53:"BACKTICK",68:"AnyDot",69:"ImpalaFields",71:"ImpalaFields_EDIT",87:"HiveOrImpalaLeftSquareBracket",89:"HiveOrImpalaRightSquareBracket",90:"HiveOrImpalaRightSquareBracketOrError",93:"UNSIGNED_INTEGER",97:"SELECT",106:"FROM",115:"NOT",116:"IS",118:"NULL",119:"TRUE",120:"FALSE",121:"COMPARISON_OPERATOR",127:"ArbitraryFunctionName",128:"UserDefinedFunction",132:"UserDefinedFunction_EDIT",135:"+",142:"UNSIGNED_INTEGER_E",147:"AnyAs",155:"AS"},
productions_: [0,[3,3],[7,3],[7,3],[4,0],[5,0],[5,1],[5,4],[8,1],[8,4],[8,4],[8,7],[9,1],[11,1],[11,1],[15,1],[15,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[36,1],[36,2],[13,1],[13,1],[39,3],[39,2],[42,2],[44,3],[44,2],[46,2],[47,1],[47,1],[48,1],[48,1],[49,1],[49,1],[51,1],[51,1],[52,1],[52,1],[50,2],[54,1],[54,1],[55,0],[55,1],[57,1],[56,3],[58,3],[58,3],[59,1],[59,3],[60,1],[60,3],[60,3],[60,3],[60,5],[60,5],[63,3],[64,1],[64,3],[66,1],[66,3],[66,4],[70,1],[70,3],[70,3],[70,4],[72,1],[72,3],[73,1],[73,3],[73,3],[74,1],[75,1],[67,1],[67,3],[67,2],[76,1],[76,3],[77,1],[77,3],[78,1],[78,2],[79,1],[79,2],[80,1],[80,3],[82,1],[81,1],[81,3],[83,1],[83,3],[83,5],[83,3],[83,3],[83,5],[84,1],[84,3],[85,1],[85,3],[85,5],[85,3],[85,1],[85,3],[85,5],[85,3],[61,1],[61,4],[61,3],[62,4],[62,4],[86,1],[86,1],[92,0],[92,3],[94,0],[94,3],[94,5],[12,1],[14,1],[95,2],[95,3],[96,2],[96,2],[96,3],[96,3],[96,3],[96,4],[96,5],[96,3],[99,2],[101,2],[101,3],[101,2],[102,2],[104,2],[104,2],[103,1],[105,1],[105,2],[109,0],[109,1],[111,2],[110,2],[110,2],[112,1],[113,1],[88,1],[88,2],[88,2],[88,2],[88,2],[88,4],[88,4],[88,4],[88,3],[88,3],[88,3],[88,3],[88,3],[88,3],[88,3],[88,3],[88,3],[88,3],[91,1],[91,3],[91,2],[91,2],[91,2],[91,2],[91,2],[91,2],[91,2],[91,2],[91,3],[91,4],[91,4],[91,4],[91,4],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[91,3],[123,1],[123,3],[124,1],[124,3],[124,3],[124,5],[124,3],[124,5],[124,4],[124,3],[124,2],[124,2],[124,4],[114,1],[114,1],[114,2],[114,2],[114,1],[114,1],[122,1],[122,1],[122,2],[122,2],[122,1],[125,1],[125,3],[130,1],[133,1],[133,2],[133,2],[65,1],[129,1],[136,1],[136,1],[137,1],[134,1],[134,1],[140,1],[140,2],[140,3],[140,2],[141,2],[141,3],[141,4],[138,1],[138,1],[138,1],[139,1],[139,1],[143,1],[143,1],[117,0],[117,1],[144,2],[144,1],[146,2],[146,3],[146,2],[98,1],[98,3],[100,1],[100,2],[100,3],[100,3],[100,3],[100,4],[100,3],[100,3],[100,4],[100,4],[100,4],[100,5],[100,5],[107,1],[107,3],[108,1],[108,3],[108,3],[108,5],[108,3],[149,1],[150,1],[151,2],[152,2],[153,1],[154,1],[145,0],[145,1],[145,1],[145,2],[145,2],[148,1],[148,1],[148,2],[148,2],[148,2],[156,2],[157,2],[126,2],[126,3],[131,3],[131,4],[131,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 2: case 3:

     return parser.yy.result;
   
break;
case 4:

     parser.prepareNewStatement();
   
break;
case 6: case 8: case 10:

     parser.addStatementLocation(_$[$0]);
   
break;
case 9: case 11:

     parser.addStatementLocation(_$[$0-3]);
   
break;
case 13:

     parser.suggestKeywords(['SELECT']);
   
break;
case 38: case 41: case 89: case 169: case 301: case 333:
this.$ = $$[$0-1];
break;
case 39: case 42: case 90:
this.$ = '';
break;
case 62: case 66: case 70: case 116: case 119:

     parser.suggestColumns();
   
break;
case 74: case 91:

     parser.addTableLocation(_$[$0], [ { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0] } ] };
   
break;
case 75: case 92:

     parser.addDatabaseLocation(_$[$0-2], [ { name: $$[$0-2] } ]);
     parser.addTableLocation(_$[$0], [ { name: $$[$0-2] }, { name: $$[$0] } ]);
     this.$ = { identifierChain: [ { name: $$[$0-2] }, { name: $$[$0] } ] };
   
break;
case 76:

     // This is a special case for Impala expression like "SELECT | FROM db.table.col"
     this.$ = { identifierChain: [ { name: $$[$0-3] }, { name: $$[$0-1] } ].concat($$[$0]) };
   
break;
case 77: case 149:

     parser.suggestTables();
     parser.suggestDatabases({ appendDot: true });
   
break;
case 78: case 84:

     parser.suggestDatabases();
     this.$ = { identifierChain: [{ name: $$[$0-2] }] };
   
break;
case 79:

     // In Impala you can have statements like 'SELECT ... FROM testTable t, t.|'
     parser.suggestTablesOrColumns($$[$0-2]);
   
break;
case 80:

     // TODO: switch to suggestColumns, it's currently handled in sqlAutocompleter2.js
     // Issue is that suggestColumns is deleted if no tables are defined and this is
     // Impala only cases like "SELECT | FROM db.table.col"
     parser.suggestTables({ identifierChain: [{ name: $$[$0-3] }, { name: $$[$0-1] }].concat($$[$0]) });
   
break;
case 81:
this.$ = [{ name: $$[$0] }];
break;
case 82:
this.$ = [{ name: $$[$0-2] }, { name: $$[$0-1] }];
break;
case 83:

     parser.suggestDatabases({ appendDot: true });
   
break;
case 87:

     parser.suggestDatabases();
   
break;
case 93:

     parser.suggestTables();
     parser.suggestDatabases({ prependDot: true });
   
break;
case 94:

     parser.suggestTablesOrColumns($$[$0-2]);
   
break;
case 96:
this.$ = { identifierChain: $$[$0-1].identifierChain, alias: $$[$0] };
break;
case 99:

     parser.yy.locations[parser.yy.locations.length - 1].type = 'column';
   
break;
case 100: case 256:

     parser.addAsteriskLocation(_$[$0], $$[$0-2].concat({ asterisk: true }));
   
break;
case 102:

     this.$ = [ $$[$0].identifier ];
     parser.yy.firstChainLocation = parser.addUnknownLocation($$[$0].location, [ $$[$0].identifier ]);
   
break;
case 103:

     if (parser.yy.firstChainLocation) {
       parser.yy.firstChainLocation.firstInChain = true;
       delete parser.yy.firstChainLocation;
     }
     $$[$0-2].push($$[$0].identifier);
     parser.addUnknownLocation($$[$0].location, $$[$0-2].concat());
   
break;
case 104: case 112:

     if ($$[$0].insideKey) {
       parser.suggestKeyValues({ identifierChain: [ $$[$0].identifier ] });
       parser.suggestColumns();
       parser.suggestFunctions();
     }
   
break;
case 105: case 113:

     if ($$[$0].insideKey) {
       parser.suggestKeyValues({ identifierChain: $$[$0-2].concat([ $$[$0].identifier ]) });
       parser.suggestColumns();
       parser.suggestFunctions();
     }
   
break;
case 108:

     parser.suggestColumns({
       identifierChain: $$[$0-2]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 109:

     parser.suggestColumns({
       identifierChain: $$[$0-4]
     });
     this.$ = { suggestKeywords: [{ value: '*', weight: 10000 }] };
   
break;
case 110:
this.$ = [ $$[$0].identifier ];
break;
case 111:

     $$[$0-2].push($$[$0].identifier);
   
break;
case 114:

     if ($$[$0-2].insideKey) {
       parser.suggestKeyValues({ identifierChain: $$[$0-4].concat([ $$[$0-2].identifier ]) });
       parser.suggestColumns();
       parser.suggestFunctions();
     }
   
break;
case 115:

     if ($$[$0-2].insideKey) {
       parser.suggestKeyValues({ identifierChain: [ $$[$0-2].identifier ] });
       parser.suggestColumns();
       parser.suggestFunctions();
     }
   
break;
case 117:

     parser.suggestColumns({ identifierChain: $$[$0-2] });
   
break;
case 118:

     parser.suggestColumns({ identifierChain: $$[$0-4] });
   
break;
case 120:
this.$ = { identifier: { name: $$[$0] }, location: _$[$0] };;
break;
case 121:
this.$ = { identifier: { name: $$[$0-3], keySet: true }, location: _$[$0-3] };
break;
case 122:
this.$ = { identifier: { name: $$[$0-2], keySet: true }, location: _$[$0-2] };
break;
case 123:
this.$ = { identifier: { name: $$[$0-3] }, insideKey: true };
break;
case 124:
this.$ = { identifier: { name: $$[$0-3] }};;
break;
case 134:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1]), _$[$0]);
     this.$ = { selectList: $$[$0] };
   
break;
case 135:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2]), _$[$0-1]);
     this.$ = { selectList: $$[$0-1], tableExpression: $$[$0] }
   
break;
case 136:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1]), _$[$02]);
     if ($$[$0].cursorAtStart) {
       var keywords = parser.getSelectListKeywords();
       parser.suggestKeywords(keywords);
     } else {
       parser.checkForSelectListKeywords($$[$0]);
     }
     if ($$[$0].suggestFunctions) {
       parser.suggestFunctions();
     }
     if ($$[$0].suggestColumns) {
       parser.suggestColumns({ identifierChain: [], source: 'select' });
     }
     if ($$[$0].suggestTables) {
       parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     }
     if ($$[$0].suggestDatabases) {
       parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
     }
     if ($$[$0].suggestAggregateFunctions) {
       parser.suggestAggregateFunctions();
       parser.suggestAnalyticFunctions();
     }
   
break;
case 137:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-1], _$[$0-1]), _$[$0], true);
     var keywords = parser.getSelectListKeywords();
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 138:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2]), _$[$0-1]);
   
break;
case 139:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2]), _$[$0-1]);
     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'select';
     }
   
break;
case 140:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2]), _$[$0-1], true);
     var keywords = parser.getSelectListKeywords();
     parser.suggestKeywords(keywords);
     parser.suggestFunctions();
     parser.suggestColumns({ identifierChain: [], source: 'select' });
     parser.suggestTables({ prependQuestionMark: true, prependFrom: true });
     parser.suggestDatabases({ prependQuestionMark: true, prependFrom: true, appendDot: true });
   
break;
case 141:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-3], _$[$0-3]), _$[$0-2]);
     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 142:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-4], _$[$0-4]), _$[$017]);
     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 143:

     parser.addClauseLocation('selectList', parser.firstDefined($$[$0-2], _$[$0-2]), _$[$0-1]);
     parser.checkForSelectListKeywords($$[$0-1]);
     var keywords = ['FROM'];
     if (parser.yy.result.suggestKeywords) {
       keywords = parser.yy.result.suggestKeywords.concat(keywords);
     }
     parser.suggestKeywords(keywords);
     parser.suggestTables({ prependFrom: true });
     parser.suggestDatabases({ prependFrom: true, appendDot: true });
   
break;
case 144:

     parser.addClauseLocation('whereClause', _$[$0-1], $$[$0].whereClauseLocation);
     parser.addClauseLocation('limitClause', $$[$0].limitClausePreceding || _$[$0-1], $$[$0].limitClauseLocation);
   
break;
case 145:

     parser.addClauseLocation('whereClause', _$[$0-1], $$[$0].whereClauseLocation);
   
break;
case 146:

     var keywords = [];

     parser.addClauseLocation('whereClause', _$[$0-2], $$[$0].whereClauseLocation);

     if ($$[$0-2]) {
       if ($$[$0-2].suggestKeywords) {
         keywords = parser.createWeightedKeywords($$[$0-2].suggestKeywords, 3);
       }

       if ($$[$0-2].tableReferenceList.types) {
         var veKeywords = parser.getValueExpressionKeywords($$[$0-2].tableReferenceList);
         keywords = keywords.concat(veKeywords.suggestKeywords);
         if (veKeywords.suggestColRefKeywords) {
           parser.suggestColRefKeywords(veKeywords.suggestColRefKeywords);
           parser.addColRefIfExists($$[$0-2].tableReferenceList);
         }
       }
     }

     if ($$[$0].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0].suggestKeywords, 2));
     }

     if ($$[$0].suggestFilters) {
       parser.suggestFilters($$[$0].suggestFilters);
     }

     parser.suggestKeywords(keywords);
  
break;
case 147:

     if (!$$[$0]) {
       parser.addClauseLocation('whereClause', _$[$0-1]);
       return;
     }
     parser.addClauseLocation('whereClause', _$[$0-1], $$[$0].whereClauseLocation);
     var keywords = [];

     if ($$[$0].suggestColRefKeywords) {
       parser.suggestColRefKeywords($$[$0].suggestColRefKeywords);
       parser.addColRefIfExists($$[$0]);
     }

     if ($$[$0].suggestKeywords && $$[$0].suggestKeywords.length) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0].suggestKeywords, 2));
     }

     parser.suggestKeywords(keywords);
   
break;
case 148:

     this.$ = { tableReferenceList : $$[$0] }
   
break;
case 151:

     var keywords = parser.getKeywordsForOptionalsLR(
       [$$[$0]],
       [{ value: 'WHERE', weight: 1 }],
       [true]);

     if (keywords.length > 0) {
       this.$ = { suggestKeywords: keywords, empty: !$$[$0] };
     } else {
       this.$ = {};
     }

     this.$.whereClauseLocation = $$[$0] ? _$[$0] : undefined;

     if (!$$[$0]) {
       this.$.suggestFilters = { prefix: 'WHERE', tablePrimaries: parser.yy.latestTablePrimaries.concat() };
     }
   
break;
case 152:

     if (parser.yy.result.suggestColumns) {
       parser.yy.result.suggestColumns.source = 'where';
     }
   
break;
case 153:

     var keywords = [];
     if ($$[$0-1].suggestKeywords) {
       keywords = keywords.concat(parser.createWeightedKeywords($$[$0-1].suggestKeywords, 1));
     }
     this.$ = parser.getValueExpressionKeywords($$[$0-1], keywords);
     this.$.cursorAtEnd = true;
     if ($$[$0-1].columnReference) {
       this.$.columnReference = $$[$0-1].columnReference;
     }
     this.$.whereClauseLocation = $$[$0-1] ? _$[$0-1] : undefined;
   
break;
case 156: case 164: case 288: case 298: case 305:
this.$ = $$[$0];
break;
case 157:

     if ($$[$0].suggestFilters) {
       parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
     }
   
break;
case 158:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS', 'NOT EXISTS']);
     parser.suggestFilters({ tablePrimaries: parser.yy.latestTablePrimaries.concat() });
   
break;
case 162: case 163:

     // verifyType($$[$0], 'BOOLEAN');
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 165:

     // verifyType($$[$0], 'NUMBER');
     this.$ = $$[$0];
     $$[$0].types = ['NUMBER'];
   
break;
case 166: case 167: case 168: case 277:
this.$ = { types: [ 'BOOLEAN' ] };
break;
case 170: case 171: case 172: case 173:

     parser.addColRefToVariableIfExists($$[$0-2], $$[$0]);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 174: case 175:

     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 176: case 177: case 178:

     // verifyType($$[$0-2], 'NUMBER');
     // verifyType($$[$0], 'NUMBER');
     this.$ = { types: [ 'NUMBER' ] };
   
break;
case 180:

     if (parser.isImpala()) {
       parser.suggestKeywords(['BETWEEN', 'EXISTS', 'IN', 'ILIKE', 'IREGEXP', 'LIKE', 'REGEXP', 'RLIKE']);
     } else {
       parser.suggestKeywords(['BETWEEN', 'EXISTS', 'IN', 'LIKE', 'REGEXP', 'RLIKE']);
     }
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 181: case 183:
this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters };
break;
case 182:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.suggestKeywords(['EXISTS']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 184:

     parser.suggestFunctions({ types: [ 'BOOLEAN' ] });
     parser.suggestColumns({ types: [ 'BOOLEAN' ] });
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 185:
this.$ = { types: [ 'T' ], suggestFilters: $$[$0].suggestFilters };
break;
case 186:

     parser.suggestFunctions();
     parser.suggestColumns();
     this.$ = { types: [ 'T' ] };
   
break;
case 187:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions('NUMBER');
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 188:

     parser.suggestFunctions({ types: [ 'NUMBER' ] });
     parser.suggestColumns({ types: [ 'NUMBER' ] });
     this.$ = { types: [ 'NUMBER' ] };
   
break;
case 189:

     var keywords = ['FALSE', 'NOT NULL', 'NOT TRUE', 'NOT FALSE', 'NULL', 'TRUE'];
     parser.suggestKeywords(keywords);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 190:

     var keywords = ['FALSE', 'NULL', 'TRUE'];
     parser.suggestKeywords(keywords);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 191: case 192: case 193:

     parser.suggestKeywords(['NOT']);
     this.$ = { types: [ 'BOOLEAN' ] };
   
break;
case 194:

     this.$ = $$[$0-1];
   
break;
case 195:

     parser.valueExpressionSuggest();
     this.$ = { types: ['T'], typeSet: true };
   
break;
case 196:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0].types);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true };
   
break;
case 197: case 198: case 199:

     parser.valueExpressionSuggest($$[$0], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0].types);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 200: case 201: case 202: case 203:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions($$[$0].types);
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 204: case 206:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2].types);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true  };
   
break;
case 205:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2].types);
     this.$ = { types: [ 'BOOLEAN' ] , typeSet: true, endsWithLessThanOrEqual: true };
   
break;
case 207:

     parser.valueExpressionSuggest($$[$0-2], $$[$0-1]);
     parser.applyTypeToSuggestions($$[$0-2].types);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, endsWithLessThanOrEqual: $$[$0-1] === '<='  };
   
break;
case 208: case 209: case 210: case 211:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions($$[$0-2].types);
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 212: case 214: case 216: case 218:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     this.$ = { types: [ 'BOOLEAN' ], typeSet: true, suggestFilters: true };
   
break;
case 213: case 217:

     parser.addColRefIfExists($$[$0]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 215: case 219:

     parser.addColRefIfExists($$[$0-2]);
     this.$ = { types: [ 'BOOLEAN' ], suggestFilters: $$[$0].suggestFilters }
   
break;
case 220: case 221:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions([ 'NUMBER' ]);
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 222: case 223: case 224:

     if (!$$[$0-2].typeSet) {
       parser.applyTypeToSuggestions(['NUMBER']);
       parser.addColRefIfExists($$[$0]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0-2].suggestFilters }
   
break;
case 225: case 226: case 227:

     parser.valueExpressionSuggest(undefined, $$[$0-1]);
     parser.applyTypeToSuggestions(['NUMBER']);
     this.$ = { types: [ 'NUMBER' ], typeSet: true };
   
break;
case 228: case 229: case 230:

     if (!$$[$0].typeSet) {
       parser.applyTypeToSuggestions(['NUMBER']);
       parser.addColRefIfExists($$[$0-2]);
     }
     this.$ = { types: [ 'NUMBER' ], suggestFilters: $$[$0].suggestFilters };
   
break;
case 231: case 233:

     $$[$0].position = 1;
   
break;
case 232:

     $$[$0].position = $$[$0-2].position + 1;
     this.$ = $$[$0];
   
break;
case 234:

     $$[$0-2].position += 1;
   
break;
case 235:

     $$[$0-2].position = 1;
   
break;
case 236:

     $$[$0-4].position += 1;
   
break;
case 237:

     parser.valueExpressionSuggest();
     $$[$0-2].position += 1;
   
break;
case 238:

     parser.valueExpressionSuggest();
     $$[$0-4].position += 1;
   
break;
case 239:

     parser.suggestValueExpressionKeywords($$[$0-3]);
   
break;
case 240: case 241:

     parser.valueExpressionSuggest();
     this.$ = { cursorAtStart : true, position: 1 };
   
break;
case 242: case 243:

     parser.valueExpressionSuggest();
     this.$ = { position: 2 };
   
break;
case 245:
this.$ = { types: ['COLREF'], columnReference: $$[$0].chain };
break;
case 246:

     // We need to handle arbitrary UDFs here instead of inside UserDefinedFunction or there will be a conflict
     // with columnReference for functions like: db.udf(foo)
     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     $$[$0-1].lastLoc.type = 'function';
     $$[$0-1].lastLoc.function = fn;
     $$[$0-1].lastLoc.location = {
       first_line: $$[$0-1].lastLoc.location.first_line,
       last_line: $$[$0-1].lastLoc.location.last_line,
       first_column: $$[$0-1].lastLoc.location.first_column,
       last_column: $$[$0-1].lastLoc.location.last_column - 1
     }
     if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
        $$[$0-1].firstLoc.type = 'database';
     } else {
       delete $$[$0-1].lastLoc.identifierChain;
     }
     if ($$[$0].expression) {
       this.$ = { function: fn, expression: $$[$0].expression, types: parser.findReturnTypes(fn) }
     } else {
       this.$ = { function: fn, types: parser.findReturnTypes(fn) }
     }
   
break;
case 247:

    parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
    if ($$[$0].expression) {
      this.$ = { function: $$[$0-1], expression: $$[$0].expression, types: parser.findReturnTypes($$[$0-1]) }
    } else {
      this.$ = { function: $$[$0-1], types: parser.findReturnTypes($$[$0-1]) }
    }
  
break;
case 249:
this.$ = { types: [ 'NULL' ] };
break;
case 251:

     if ($$[$0].suggestKeywords) {
       this.$ = { types: ['COLREF'], columnReference: $$[$0], suggestKeywords: $$[$0].suggestKeywords };
     } else {
       this.$ = { types: ['COLREF'], columnReference: $$[$0] };
     }
   
break;
case 252:

     var fn = $$[$0-1].chain[$$[$0-1].chain.length - 1].name.toLowerCase();
     $$[$0-1].lastLoc.type = 'function';
     $$[$0-1].lastLoc.function = fn;
     $$[$0-1].lastLoc.location = {
       first_line: $$[$0-1].lastLoc.location.first_line,
       last_line: $$[$0-1].lastLoc.location.last_line,
       first_column: $$[$0-1].lastLoc.location.first_column,
       last_column: $$[$0-1].lastLoc.location.last_column - 1
     }
     if ($$[$0-1].lastLoc !== $$[$0-1].firstLoc) {
        $$[$0-1].firstLoc.type = 'database';
     } else {
       delete $$[$0-1].lastLoc.identifierChain;
     }
     if ($$[$0].position) {
       parser.applyArgumentTypesToSuggestions(fn, $$[$0].position);
     }
     this.$ = { types: parser.findReturnTypes(fn) };
   
break;
case 253: case 328:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     if ($$[$0].position) {
       parser.applyArgumentTypesToSuggestions($$[$0-1], $$[$0].position);
     }
     this.$ = { types: parser.findReturnTypes($$[$0-1]) };
   
break;
case 255:

     var lastLoc = parser.yy.locations[parser.yy.locations.length - 1];
     if (lastLoc.type !== 'variable') {
       lastLoc.type = 'column';
     }
     // used for function references with db prefix
     var firstLoc = parser.yy.locations[parser.yy.locations.length - $$[$0].length];
     this.$ = { chain: $$[$0], firstLoc: firstLoc, lastLoc: lastLoc }
   
break;
case 262:

     parser.suggestValues($$[$0]);
   
break;
case 263:
this.$ = { types: [ 'NUMBER' ] };
break;
case 269: case 271:
this.$ = $$[$0-1] + $$[$0];
break;
case 270:
this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 275: case 276:

     this.$ = { types: [ 'STRING' ] }
   
break;
case 278:

    this.$ = { partialQuote: '\'', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 279:

    this.$ = { partialQuote: '"', missingEndQuote: parser.yy.missingEndQuote };
  
break;
case 284:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
       this.$ = { valueExpression: $$[$0-1], alias: $$[$0].alias };
       if (!parser.yy.selectListAliases) {
         parser.yy.selectListAliases = [];
       }
       parser.yy.selectListAliases.push({ name: $$[$0].alias, types: $$[$0-1].types || ['T'] });
     } else {
       this.$ = { valueExpression: $$[$0-1] }
     }
   
break;
case 285:

     parser.addAsteriskLocation(_$[$0], [{ asterisk: true }]);
     this.$ = { asterisk: true }
   
break;
case 286:

     if ($$[$0]) {
       parser.addColumnAliasLocation($$[$0].location, $$[$0].alias, _$[$0-1]);
     }
   
break;
case 287:

     parser.suggestFunctions();
     parser.suggestColumns();
     parser.addColumnAliasLocation(_$[$0], $$[$0], _$[$0-2]);
     this.$ = { suggestAggregateFunctions: true };
   
break;
case 289:
this.$ = [ $$[$0] ];
break;
case 290:

     $$[$0-2].push($$[$0]);
   
break;
case 292: case 293:

     this.$ = { cursorAtStart : true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 295:

     parser.checkForSelectListKeywords($$[$0-2]);
   
break;
case 296:

     parser.checkForSelectListKeywords($$[$0-3]);
   
break;
case 297:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestTables: true, suggestDatabases: true, suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true };
   
break;
case 299: case 300: case 302:

     this.$ = { suggestKeywords: parser.getSelectListKeywords(), suggestFunctions: true, suggestColumns: true, suggestAggregateFunctions: true,  };
   
break;
case 303:
this.$ = $$[$0-2];
break;
case 310:

       parser.suggestTables();
       parser.suggestDatabases({ appendDot: true });
   
break;
case 311:

     this.$ = $$[$0];

     if (parser.yy.latestTablePrimaries.length > 0) {
       var idx = parser.yy.latestTablePrimaries.length - 1;
       var tables = [];
       do {
         var tablePrimary = parser.yy.latestTablePrimaries[idx];
         if (!tablePrimary.subQueryAlias) {
           tables.unshift(tablePrimary.alias ? { identifierChain: tablePrimary.identifierChain, alias: tablePrimary.alias } : { identifierChain: tablePrimary.identifierChain })
         }
         idx--;
       } while (idx >= 0 && tablePrimary.join && !tablePrimary.subQueryAlias)
     }
   
break;
case 313:

     this.$ = {
       primary: $$[$0-1]
     }
     if ($$[$0-1].identifierChain) {
       if ($$[$0]) {
         $$[$0-1].alias = $$[$0].alias
         parser.addTableAliasLocation($$[$01].location, $$[$0].alias, $$[$0-1].identifierChain);
       }
       parser.addTablePrimary($$[$0-1]);
     }
     var keywords = [];

     keywords = parser.getKeywordsForOptionalsLR([$$[$0]], [{ value: 'AS', weight: 1 }], [true]);
     if (keywords.length > 0) {
       this.$.suggestKeywords = keywords;
     }
   
break;
case 314:

     if ($$[$0]) {
       parser.addTableAliasLocation($$[$01].location, $$[$01].alias, $$[$0-1].identifierChain);
     }
   
break;
case 318: case 319: case 320: case 321:
this.$ = { alias: $$[$0], location: _$[$0] };
break;
case 327:

     parser.addFunctionLocation(_$[$0-1], $$[$0-1]);
     if ($$[$0].expression) {
       this.$ = { function: $$[$0-1], expression: $$[$0].expression, types: parser.findReturnTypes($$[$0-1]) }
     } else {
       this.$ = { function: $$[$0-1], types: parser.findReturnTypes($$[$0-1]) }
     }
   
break;
case 330:
this.$ = { expression: $$[$0-1] };
break;
case 331:

     parser.valueExpressionSuggest();
     this.$ = { position: 1 }
   
break;
case 332:

     parser.suggestValueExpressionKeywords($$[$0-1]);
   
break;
}
},
table: [o($V0,$V1,{7:1,4:2}),{1:[3]},o($V2,$V3,{5:3,8:4,9:5,11:6,12:7,13:8,14:9,95:10,96:13,37:$V4,38:$V5,97:$V6}),{6:[1,15],10:[1,16]},{6:[1,17]},o($V2,[2,6]),{6:[2,8],10:[1,18]},o($V2,[2,12]),o($V2,[2,13]),o($V2,[2,14]),o($V2,[2,132]),o([2,6,10,21,23,35],$V7),o([2,6,10,16,17,19,20,21,22,23,24,26,27,28,31,32,33,34,35,40,45,53,68,90,93,106,115,118,119,120,121,127,128,142,147,155],[2,37]),o($V2,[2,133]),{13:27,15:67,16:$V8,17:$V9,19:$Va,20:$Vb,22:$Vc,24:$Vd,31:$Ve,37:[1,21],38:$V5,39:54,40:$Vf,42:58,44:55,45:$Vg,46:59,53:$Vh,61:49,62:51,65:35,67:57,68:$Vi,81:44,83:46,88:24,91:26,93:$Vj,98:19,100:20,114:28,115:$Vk,118:$Vl,119:$Vm,120:$Vn,122:34,125:36,127:$Vo,128:$Vp,129:40,130:41,132:$Vq,134:47,136:43,137:45,138:48,139:50,140:52,141:53,142:$Vr,143:56,144:22,146:23},{1:[2,2]},o($V0,$V1,{4:71}),{1:[2,3]},o($Vs,$V1,{4:72}),o($V2,$Vt,{99:73,101:74,102:77,104:78,23:[1,76],37:[1,75],106:[1,79]}),o($V2,[2,136],{99:80,102:81,106:$Vu}),o($V2,[2,137],{144:22,114:28,65:35,136:43,134:47,138:48,61:49,140:52,141:53,39:54,44:55,143:56,15:67,102:81,99:83,98:84,88:94,125:100,81:102,67:103,16:$V8,17:$V9,19:$Vv,20:$Vw,22:[1,92],23:[1,85],24:$Vx,26:$Vy,27:$Vz,28:$VA,31:$VB,32:$VC,33:$VD,34:$VE,40:$VF,45:$VG,53:$Vh,68:$Vi,93:$Vj,106:$Vu,115:$VH,118:$Vl,119:$Vm,120:$Vn,121:$VI,127:$VJ,128:$Vp,142:$Vr,147:$V7}),o($VK,[2,289]),o($VL,[2,291],{23:[1,106]}),o($VK,$VM,{15:67,145:107,148:108,67:120,47:121,50:123,48:124,39:126,44:127,42:128,46:129,16:$V8,17:$V9,22:$VN,24:$VO,26:$VP,27:$VQ,28:$VR,32:$VS,33:$VT,34:$VU,40:$Vf,45:$Vg,53:$VV,115:$VW,116:$VX,121:$VY,155:[1,122]}),o($VK,$VZ),o($V_,$VM,{15:67,67:120,47:121,39:126,44:127,145:130,16:$V8,17:$V9,22:$V$,24:$V01,26:$V11,27:$V21,28:$V31,32:$V41,33:$V51,34:$V61,40:$VF,45:$VG,53:$Vh,121:$V71,155:$V81}),{147:$V91},o($Va1,[2,161]),{15:67,16:$V8,17:$V9,19:$Va,20:$Vb,24:$Vd,31:$Ve,37:[1,144],39:54,40:$Vf,42:58,44:55,45:$Vg,46:59,53:$Vh,61:49,62:51,65:35,67:57,68:$Vi,81:44,83:46,88:142,91:143,93:$Vj,114:28,115:$Vk,118:$Vl,119:$Vm,120:$Vn,122:34,125:36,127:$Vo,128:$Vp,129:40,130:41,132:$Vq,134:47,136:43,137:45,138:48,139:50,140:52,141:53,142:$Vr,143:56},{13:147,15:67,16:$V8,17:$V9,19:$Va,20:$Vb,24:$Vd,31:$Ve,37:$Vb1,38:$V5,39:54,40:$Vf,42:58,44:55,45:$Vg,46:59,53:$Vh,61:49,62:51,65:35,67:57,68:$Vi,81:44,83:46,88:145,91:146,93:$Vj,114:28,115:$Vk,118:$Vl,119:$Vm,120:$Vn,122:34,125:36,127:$Vo,128:$Vp,129:40,130:41,132:$Vq,134:47,136:43,137:45,138:48,139:50,140:52,141:53,142:$Vr,143:56},{15:67,16:$V8,17:$V9,19:$Va,20:$Vb,24:$Vd,31:$Ve,37:$Vc1,38:[1,151],39:54,40:$Vf,42:58,44:55,45:$Vg,46:59,53:$Vh,61:49,62:51,65:35,67:57,68:$Vi,81:44,83:46,88:149,91:150,93:$Vj,114:28,115:$Vk,118:$Vl,119:$Vm,120:$Vn,122:34,125:36,127:$Vo,128:$Vp,129:40,130:41,132:$Vq,134:47,136:43,137:45,138:48,139:50,140:52,141:53,142:$Vr,143:56},{15:67,16:$V8,17:$V9,19:$Va,20:$Vb,24:$Vd,31:$Ve,37:$Vc1,38:[1,155],39:54,40:$Vf,42:58,44:55,45:$Vg,46:59,53:$Vh,61:49,62:51,65:35,67:57,68:$Vi,81:44,83:46,88:153,91:154,93:$Vj,114:28,115:$Vk,118:$Vl,119:$Vm,120:$Vn,122:34,125:36,127:$Vo,128:$Vp,129:40,130:41,132:$Vq,134:47,136:43,137:45,138:48,139:50,140:52,141:53,142:$Vr,143:56},{15:67,16:$V8,17:$V9,19:$Va,20:$Vb,24:$Vd,31:$Ve,37:[1,158],39:54,40:$Vf,42:58,44:55,45:$Vg,46:59,53:$Vh,61:49,62:51,65:35,67:57,68:$Vi,81:44,83:46,88:156,91:157,93:$Vj,114:28,115:$Vk,118:$Vl,119:$Vm,120:$Vn,122:34,125:36,127:$Vo,128:$Vp,129:40,130:41,132:$Vq,134:47,136:43,137:45,138:48,139:50,140:52,141:53,142:$Vr,143:56},o($Vd1,[2,179]),o($Va1,[2,244]),o([6,10,16,17,21,22,23,24,26,27,28,32,33,34,37,40,45,53,89,106,115,116,121,155],$Ve1,{126:159,131:160,20:$Vf1}),{20:$Vf1,126:162,131:163},o($Va1,[2,248]),o($Va1,[2,249]),o($Vd1,[2,250]),o($Vd1,[2,251]),o($Vd1,[2,254]),o($Va1,[2,261]),o([6,10,16,17,20,21,22,23,24,26,27,28,32,33,34,37,40,45,53,89,106,115,116,121,155],$Vg1,{68:[1,164]}),o($Vd1,[2,262]),o($Vd1,[2,257]),o($Va1,[2,263]),o($Va1,[2,264]),o($Vh1,[2,102]),o($Vd1,[2,265]),o($Vd1,[2,104],{68:[1,165]}),o($Va1,[2,266]),o($Va1,[2,267]),o($Va1,[2,275]),o($Va1,[2,276]),o($Va1,[2,277]),o([6,10,16,17,20,21,22,23,24,26,27,28,32,33,34,37,40,45,53,68,89,106,115,116,121,155],$Vi1,{87:[1,166]}),o($Vd1,[2,278]),o($Vd1,[2,279]),o($Va1,[2,268],{68:[1,167]}),{93:[1,168],142:[1,169]},{93:[1,170]},{40:$Vj1,41:$Vk1,43:[1,173]},{41:$Vl1,43:[1,176],45:$Vm1},o($Va1,[2,280]),o($Va1,[2,281]),o($Vn1,[2,88]),{41:$Vo1,53:$Vp1},o($Vn1,[2,15]),o($Vn1,[2,16]),o($V2,$V3,{9:5,12:7,13:8,14:9,95:10,96:13,5:179,11:180,37:$V4,38:$V5,97:$V6}),o($V2,$V3,{9:5,12:7,95:10,5:181,97:$Vq1}),o($V2,[2,135]),o($V2,[2,138]),o($V2,[2,143],{144:22,114:28,65:35,136:43,134:47,138:48,61:49,140:52,141:53,39:54,44:55,143:56,15:67,102:81,88:94,125:100,81:102,67:103,99:183,98:185,16:$V8,17:$V9,19:$Vv,20:$Vw,22:$Vc,23:[1,184],24:$Vx,31:$VB,40:$VF,45:$VG,53:$Vh,68:$Vi,93:$Vj,106:$Vu,115:$VH,118:$Vl,119:$Vm,120:$Vn,127:$VJ,128:$Vp,142:$Vr}),{13:187,15:67,16:$V8,17:$V9,19:$Va,20:$Vb,22:$Vc,24:$Vd,31:$Ve,37:$Vb1,38:$V5,39:54,40:$Vf,42:58,44:55,45:$Vg,46:59,53:$Vh,61:49,62:51,65:35,67:57,68:$Vi,81:44,83:46,88:24,91:26,93:$Vj,114:28,115:$Vk,118:$Vl,119:$Vm,120:$Vn,122:34,125:36,127:$Vo,128:$Vp,129:40,130:41,132:$Vq,134:47,136:43,137:45,138:48,139:50,140:52,141:53,142:$Vr,143:56,144:186,146:188},o($V2,$Vr1,{103:189,105:191,109:192,110:193,111:194,35:[1,195],37:[1,190]}),o($V2,$Vr1,{109:192,103:196,111:197,35:$Vs1}),{15:67,16:$V8,17:$V9,37:[1,200],50:211,53:$VV,66:208,67:210,70:209,107:199,108:201,149:202,150:203,151:204,152:205,153:206,154:207},o($V2,[2,139]),o($V2,$Vr1,{103:189,109:192,111:197,35:$Vs1}),{15:67,16:$V8,17:$V9,53:$Vh,66:208,67:213,107:212,149:202,151:204,153:206},o($V2,[2,140]),o($VL,[2,292],{23:$Vt1}),{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,22:$Vc,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:94,93:$Vj,98:215,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56,144:22},{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:216,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:217,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:218,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:219,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:220,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:221,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},o($V_,$VZ,{114:28,65:35,136:43,134:47,138:48,61:49,140:52,141:53,39:54,44:55,143:56,15:67,125:100,81:102,67:103,88:222,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,40:$VF,45:$VG,53:$Vh,68:$Vi,93:$Vj,115:$VH,118:$Vl,119:$Vm,120:$Vn,127:$VJ,128:$Vp,142:$Vr}),{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:223,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},o($V_,$VM,{15:67,145:107,67:120,47:121,39:126,44:127,16:$V8,17:$V9,22:$Vu1,24:$Vv1,26:$Vw1,27:$Vx1,28:$Vy1,32:$Vz1,33:$VA1,34:$VB1,40:$VF,45:$VG,53:$Vh,116:$VC1,121:$VD1,155:$V81}),{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:234,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:235,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:236,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:237,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:238,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},o([2,6,10,16,17,21,22,23,24,26,27,28,32,33,34,40,45,53,89,90,106,116,121,155],$Ve1,{126:159,20:$VE1}),{20:$VE1,126:162},o([2,6,10,16,17,20,21,22,23,24,26,27,28,32,33,34,40,45,53,89,90,106,116,121,155],$Vg1,{68:[1,240]}),o([2,6,10,16,17,20,21,22,23,24,26,27,28,32,33,34,40,45,53,68,89,90,106,116,121,155],$Vi1,{87:[1,241]}),{40:$Vj1,41:$Vk1},{41:$Vl1,45:$Vm1},{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,22:$Vc,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:94,93:$Vj,98:242,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56,144:22},o($VK,[2,284]),o($V_,[2,288]),o($VF1,$VG1,{117:243,37:[1,244],115:[1,245]}),{13:249,15:67,16:$V8,17:$V9,19:$Va,20:$Vb,24:$Vd,31:$Ve,37:$Vb1,38:$V5,39:54,40:$Vf,42:58,44:55,45:$Vg,46:59,49:247,50:250,53:$VV,61:49,62:51,65:35,67:57,68:$Vi,81:44,83:46,88:246,91:248,93:$Vj,114:28,115:$Vk,118:$Vl,119:$Vm,120:$Vn,122:34,125:36,127:$Vo,128:$Vp,129:40,130:41,132:$Vq,134:47,136:43,137:45,138:48,139:50,140:52,141:53,142:$Vr,143:56},{13:249,15:67,16:$V8,17:$V9,19:$Va,20:$Vb,24:$Vd,31:$Ve,37:$Vb1,38:$V5,39:54,40:$Vf,42:58,44:55,45:$Vg,46:59,49:252,50:250,53:$VV,61:49,62:51,65:35,67:57,68:$Vi,81:44,83:46,88:251,91:253,93:$Vj,114:28,115:$Vk,118:$Vl,119:$Vm,120:$Vn,122:34,125:36,127:$Vo,128:$Vp,129:40,130:41,132:$Vq,134:47,136:43,137:45,138:48,139:50,140:52,141:53,142:$Vr,143:56},{13:249,15:67,16:$V8,17:$V9,19:$Va,20:$Vb,24:$Vd,31:$Ve,37:$Vb1,38:$V5,39:54,40:$Vf,42:58,44:55,45:$Vg,46:59,49:255,50:250,53:$VV,61:49,62:51,65:35,67:57,68:$Vi,81:44,83:46,88:254,91:256,93:$Vj,114:28,115:$Vk,118:$Vl,119:$Vm,120:$Vn,122:34,125:36,127:$Vo,128:$Vp,129:40,130:41,132:$Vq,134:47,136:43,137:45,138:48,139:50,140:52,141:53,142:$Vr,143:56},{13:249,15:67,16:$V8,17:$V9,19:$Va,20:$Vb,24:$Vd,31:$Ve,37:$Vb1,38:$V5,39:54,40:$Vf,42:58,44:55,45:$Vg,46:59,49:258,50:250,53:$VV,61:49,62:51,65:35,67:57,68:$Vi,81:44,83:46,88:257,91:259,93:$Vj,114:28,115:$Vk,118:$Vl,119:$Vm,120:$Vn,122:34,125:36,127:$Vo,128:$Vp,129:40,130:41,132:$Vq,134:47,136:43,137:45,138:48,139:50,140:52,141:53,142:$Vr,143:56},{13:249,15:67,16:$V8,17:$V9,19:$Va,20:$Vb,24:$Vd,31:$Ve,37:$Vb1,38:$V5,39:54,40:$Vf,42:58,44:55,45:$Vg,46:59,49:261,50:250,53:$VV,61:49,62:51,65:35,67:57,68:$Vi,81:44,83:46,88:260,91:262,93:$Vj,114:28,115:$Vk,118:$Vl,119:$Vm,120:$Vn,122:34,125:36,127:$Vo,128:$Vp,129:40,130:41,132:$Vq,134:47,136:43,137:45,138:48,139:50,140:52,141:53,142:$Vr,143:56},{13:249,15:67,16:$V8,17:$V9,19:$Va,20:$Vb,24:$Vd,31:$Ve,37:$Vb1,38:$V5,39:54,40:$Vf,42:58,44:55,45:$Vg,46:59,49:264,50:250,53:$VV,61:49,62:51,65:35,67:57,68:$Vi,81:44,83:46,88:263,91:265,93:$Vj,114:28,115:$Vk,118:$Vl,119:$Vm,120:$Vn,122:34,125:36,127:$Vo,128:$Vp,129:40,130:41,132:$Vq,134:47,136:43,137:45,138:48,139:50,140:52,141:53,142:$Vr,143:56},{13:249,15:67,16:$V8,17:$V9,19:$Va,20:$Vb,24:$Vd,31:$Ve,37:$Vb1,38:$V5,39:54,40:$Vf,42:58,44:55,45:$Vg,46:59,49:267,50:250,53:$VV,61:49,62:51,65:35,67:57,68:$Vi,81:44,83:46,88:266,91:268,93:$Vj,114:28,115:$Vk,118:$Vl,119:$Vm,120:$Vn,122:34,125:36,127:$Vo,128:$Vp,129:40,130:41,132:$Vq,134:47,136:43,137:45,138:48,139:50,140:52,141:53,142:$Vr,143:56},{13:249,15:67,16:$V8,17:$V9,19:$Va,20:$Vb,24:$Vd,31:$Ve,37:$Vb1,38:$V5,39:54,40:$Vf,42:58,44:55,45:$Vg,46:59,49:270,50:250,53:$VV,61:49,62:51,65:35,67:57,68:$Vi,81:44,83:46,88:269,91:271,93:$Vj,114:28,115:$Vk,118:$Vl,119:$Vm,120:$Vn,122:34,125:36,127:$Vo,128:$Vp,129:40,130:41,132:$Vq,134:47,136:43,137:45,138:48,139:50,140:52,141:53,142:$Vr,143:56},{13:249,15:67,16:$V8,17:$V9,19:$Va,20:$Vb,24:$Vd,31:$Ve,37:$Vb1,38:$V5,39:54,40:$Vf,42:58,44:55,45:$Vg,46:59,49:273,50:250,53:$VV,61:49,62:51,65:35,67:57,68:$Vi,81:44,83:46,88:272,91:274,93:$Vj,114:28,115:$Vk,118:$Vl,119:$Vm,120:$Vn,122:34,125:36,127:$Vo,128:$Vp,129:40,130:41,132:$Vq,134:47,136:43,137:45,138:48,139:50,140:52,141:53,142:$Vr,143:56},{37:[1,275]},o($VH1,[2,318]),o($VH1,[2,319]),{15:67,16:$V8,17:$V9,37:[1,280],39:126,40:$Vf,42:128,44:127,45:$Vg,46:129,47:277,48:279,50:278,53:$VV,67:276},o($V_,[2,322]),o($V_,[2,323]),{41:$Vo1,43:[1,281],53:$Vp1},o($VH1,[2,44]),o($VH1,[2,45]),o($V_,[2,46]),o($V_,[2,47]),o($V_,[2,286]),{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:282,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:283,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:284,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:285,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:286,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:287,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:288,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:289,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:290,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},{15:67,16:$V8,17:$V9,39:126,40:$VF,44:127,45:$VG,47:277,53:$Vh,67:276},{15:67,16:$V8,17:$V9,53:$Vh,67:291},o($VI1,$VJ1,{22:$VN,24:$VO,26:$VP,27:$VQ,28:$VR,33:$VT,116:$VX,121:$VY}),o($VK1,[2,181],{22:$V$,24:$V01,26:$V11,27:$V21,28:$V31,33:$V51,121:$V71}),o([2,6,10,16,17,21,23,24,32,34,40,45,53,90,106,155],[2,182],{22:$VL1,26:$Vy,27:$Vz,28:$VA,33:$VD,121:$VI}),o($VI1,$VM1,{22:$VN,24:$VO,26:$VP,27:$VQ,28:$VR,33:$VT,116:$VX,121:$VY}),o($VK1,[2,183],{22:$V$,24:$V01,26:$V11,27:$V21,28:$V31,33:$V51,121:$V71}),o($Vd1,[2,184]),o([2,6,10,16,17,19,20,21,22,23,24,26,27,28,31,32,33,34,40,45,53,68,90,93,106,115,118,119,120,121,127,128,142,147,155],$V7),o($VI1,$VN1,{22:$VN,24:$VO,26:$VP,27:$VQ,28:$VR,33:$VT,116:$VX,121:$VY}),o($VK1,[2,185],{22:$V$,24:$V01,26:$V11,27:$V21,28:$V31,33:$V51,121:$V71}),o($Vd1,[2,186]),{22:$VL1,26:$Vy,27:$Vz,28:$VA,32:$VC,33:$VD,34:$VE,121:$VI},o($VO1,$VP1),o($Vd1,[2,187]),o($Vd1,[2,188]),{21:$VQ1,22:$VN,24:$VO,26:$VP,27:$VQ,28:$VR,32:$VS,33:$VT,34:$VU,115:$VW,116:$VX,121:$VY},{2:$VR1,21:$VS1,22:$V$,24:$V01,26:$V11,27:$V21,28:$V31,32:$V41,33:$V51,34:$V61,54:294,121:$V71},{2:$VR1,21:$VS1,22:$VL1,26:$Vy,27:$Vz,28:$VA,32:$VC,33:$VD,34:$VE,54:297,121:$VI},o($Va1,[2,246]),o($Vd1,[2,252]),{13:300,15:67,16:$V8,17:$V9,19:$Va,20:$Vb,21:$VT1,23:[1,304],24:$Vd,31:$Ve,37:$Vb1,38:$V5,39:54,40:$Vf,42:58,44:55,45:$Vg,46:59,53:$Vh,61:49,62:51,65:35,67:57,68:$Vi,81:44,83:46,88:302,91:303,93:$Vj,114:28,115:$Vk,118:$Vl,119:$Vm,120:$Vn,122:34,123:299,124:301,125:36,127:$Vo,128:$Vp,129:40,130:41,132:$Vq,134:47,136:43,137:45,138:48,139:50,140:52,141:53,142:$Vr,143:56},o($Va1,[2,247]),o($Vd1,[2,253]),{15:67,16:$V8,17:$V9,22:$VU1,38:$VV1,50:310,52:308,53:$VV,61:306,62:307,67:57},{15:67,16:$V8,17:$V9,53:$Vh,61:49,67:103,81:311},{13:314,15:67,16:$V8,17:$V9,19:$Va,20:$Vb,24:$Vd,31:$Ve,37:$Vb1,38:$V5,39:54,40:$Vf,42:58,44:55,45:$Vg,46:59,53:$Vh,61:49,62:51,65:35,67:57,68:$Vi,81:44,83:46,88:312,89:$VW1,91:315,93:$Vj,114:28,115:$Vk,118:$Vl,119:$Vm,120:$Vn,122:34,125:36,127:$Vo,128:$Vp,129:40,130:41,132:$Vq,134:47,136:43,137:45,138:48,139:50,140:52,141:53,142:$Vr,143:56},o($Va1,[2,269],{93:[1,316],142:[1,317]}),o($Va1,[2,271]),{93:[1,318]},o($Va1,[2,272]),{40:[1,319]},o($VX1,[2,39]),o($Vd1,[2,40]),{45:[1,320]},o($VX1,[2,42]),o($Vd1,[2,43]),{53:[1,321]},o($Vn1,[2,90]),o($V2,[2,7]),{6:[2,10],10:[1,323]},{6:[2,9],10:$VY1},{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,22:$Vc,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:94,93:$Vj,98:324,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56,144:22},o($V2,[2,141]),{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,22:$Vc,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:94,93:$Vj,98:326,99:325,102:81,106:$Vu,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56,144:22},o($VL,[2,295],{23:$Vt1}),o($VK,[2,290]),o($VL,[2,297],{144:22,114:28,65:35,136:43,134:47,138:48,61:49,140:52,141:53,39:54,44:55,143:56,15:67,88:94,125:100,81:102,67:103,98:327,16:$V8,17:$V9,19:$Vv,20:$Vw,22:$Vc,23:[1,328],24:$Vx,31:$VB,40:$VF,45:$VG,53:$Vh,68:$Vi,93:$Vj,115:$VH,118:$Vl,119:$Vm,120:$Vn,127:$VJ,128:$Vp,142:$Vr,147:$V91}),o($VL,[2,298],{23:[1,329]}),o($V2,[2,144]),o($V2,$Vr1,{109:192,111:197,103:330,35:$Vs1}),o($V2,[2,147]),o($V2,[2,151]),o($V2,[2,152]),o($V2,$VZ1,{37:[1,331]}),{15:67,16:$V8,17:$V9,19:$Va,20:$Vb,24:$Vd,31:$Ve,37:[1,333],39:54,40:$Vf,42:58,44:55,45:$Vg,46:59,53:$Vh,61:49,62:51,65:35,67:57,68:$Vi,81:44,83:46,88:336,91:335,93:$Vj,112:334,113:332,114:28,115:$Vk,118:$Vl,119:$Vm,120:$Vn,122:34,125:36,127:$Vo,128:$Vp,129:40,130:41,132:$Vq,134:47,136:43,137:45,138:48,139:50,140:52,141:53,142:$Vr,143:56},o($V2,[2,145]),o($V2,$VZ1),{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:337,93:$Vj,112:334,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},o([6,10,35,37],$V_1,{23:[1,338]}),o($V$1,[2,149]),o($V$1,[2,150]),o($V02,[2,304]),o($V$1,[2,306],{23:[1,339]}),o($V02,[2,311]),o($V12,[2,312]),o($V02,$VM,{15:67,67:120,47:121,39:126,44:127,145:340,16:$V8,17:$V9,40:$VF,45:$VG,53:$Vh,155:$V81}),o($V12,$VM,{15:67,67:120,47:121,39:126,44:127,145:341,16:$V8,17:$V9,40:$VF,45:$VG,53:$Vh,155:$V81}),o($V22,[2,315]),o($V32,[2,316]),o($V22,$V42,{68:[1,342]}),o($V32,[2,77],{68:[1,343]}),o($V$1,$V_1,{23:$V52}),o($V32,$V42,{68:[1,345]}),{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,22:$Vc,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:94,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56,144:186},o($VL,[2,293],{23:$Vt1}),o($Vd1,[2,196],{116:$VC1}),o($Vd1,[2,197],{116:$VC1}),o($Vd1,[2,198],{116:$VC1}),o($Vd1,[2,199],{116:$VC1}),o($Vd1,[2,212],{116:$VC1}),o($Vd1,[2,216],{116:$VC1}),o($Vd1,[2,220],{116:$VC1}),o($Vd1,[2,221],{116:$VC1}),o($VF1,$VG1,{117:243,115:[1,346]}),{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:347,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:348,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:349,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:350,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:351,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:352,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:353,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:354,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:355,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},o($V62,$VJ1,{22:$Vu1,24:$Vv1,26:$Vw1,27:$Vx1,28:$Vy1,33:$VA1,116:$VC1,121:$VD1}),o($V62,$VM1,{22:$Vu1,24:$Vv1,26:$Vw1,27:$Vx1,28:$Vy1,33:$VA1,116:$VC1,121:$VD1}),o($V62,$VN1,{22:$Vu1,24:$Vv1,26:$Vw1,27:$Vx1,28:$Vy1,33:$VA1,116:$VC1,121:$VD1}),o($V72,$VP1),{21:$VQ1,22:$Vu1,24:$Vv1,26:$Vw1,27:$Vx1,28:$Vy1,32:$Vz1,33:$VA1,34:$VB1,116:$VC1,121:$VD1},{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,21:$VT1,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:357,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,123:356,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},{15:67,16:$V8,17:$V9,22:$VU1,53:$Vh,61:306,67:103},{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:358,89:$VW1,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},o($VL,[2,294],{23:$Vt1}),{118:[1,359],119:[1,360],120:[1,361]},o($Vd1,[2,189],{118:[1,362],119:[1,364],120:[1,363]}),o($VF1,$V82,{37:[1,365]}),o($V92,$Va2,{22:$VN,24:$VO,33:$VT,116:$VX}),o($Vd1,[2,204]),o($Vb2,[2,208],{22:$V$,24:$V01,33:$V51}),o($Vd1,[2,48]),o($Vd1,[2,49]),o($V92,$Vc2,{22:$VN,24:$VO,33:$VT,116:$VX}),o($Vd1,[2,205]),o($Vb2,[2,209],{22:$V$,24:$V01,33:$V51}),o($V92,$Vd2,{22:$VN,24:$VO,33:$VT,116:$VX}),o($Vd1,[2,206]),o($Vb2,[2,210],{22:$V$,24:$V01,33:$V51}),o($V92,$Ve2,{22:$VN,24:$VO,33:$VT,116:$VX}),o($Vd1,[2,207]),o($Vb2,[2,211],{22:$V$,24:$V01,33:$V51}),o($Vf2,$Vg2,{22:$VN,24:$VO,26:$VP,27:$VQ,28:$VR,33:$VT,115:$VW,116:$VX,121:$VY}),o($Vd1,[2,214]),o($VK1,[2,215],{22:$V$,24:$V01,26:$V11,27:$V21,28:$V31,33:$V51,121:$V71}),o($Vf2,$Vh2,{22:$VN,24:$VO,26:$VP,27:$VQ,28:$VR,33:$VT,115:$VW,116:$VX,121:$VY}),o($Vd1,[2,218]),o($VK1,[2,219],{22:$V$,24:$V01,26:$V11,27:$V21,28:$V31,33:$V51,121:$V71}),o($VO1,$Vi2,{116:$VX}),o($Vd1,[2,225]),o($Vd1,[2,228]),o($VO1,$Vj2,{116:$VX}),o($Vd1,[2,226]),o($Vd1,[2,229]),o($VO1,$Vk2,{116:$VX}),o($Vd1,[2,227]),o($Vd1,[2,230]),o($Vd1,[2,180]),o($VH1,[2,320]),o($VH1,[2,321]),o($V_,[2,324]),o($V_,[2,325]),o($V_,[2,326]),o($Vl2,[2,54]),o($Vb2,[2,200],{22:$Vu1,24:$Vv1,33:$VA1,116:$VC1}),o($Vb2,[2,201],{22:$Vu1,24:$Vv1,33:$VA1,116:$VC1}),o($Vb2,[2,202],{22:$Vu1,24:$Vv1,33:$VA1,116:$VC1}),o($Vb2,[2,203],{22:$Vu1,24:$Vv1,33:$VA1,116:$VC1}),o($VK1,[2,213],{22:$Vu1,24:$Vv1,26:$Vw1,27:$Vx1,28:$Vy1,33:$VA1,116:$VC1,121:$VD1}),o($VK1,[2,217],{22:$Vu1,24:$Vv1,26:$Vw1,27:$Vx1,28:$Vy1,33:$VA1,116:$VC1,121:$VD1}),o($Vd1,[2,222],{116:$VC1}),o($Vd1,[2,223],{116:$VC1}),o($Vd1,[2,224],{116:$VC1}),o($V_,[2,287]),{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:222,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},o($Va1,[2,169]),o($Vd1,[2,194]),o($Vd1,[2,55]),o($Vd1,[2,56]),o($Vd1,[2,195]),o($Va1,[2,329]),{21:$Vm2,23:[1,368],37:[1,367]},{2:$VR1,21:$VS1,23:[1,370],54:369},{2:$VR1,21:$VS1,54:371},o($Vn2,$Vo2,{22:$VN,24:$VO,26:$VP,27:$VQ,28:$VR,32:$VS,33:$VT,34:$VU,115:$VW,116:$VX,121:$VY}),o($Vp2,[2,233],{22:$V$,23:[1,372],24:$V01,26:$V11,27:$V21,28:$V31,32:$V41,33:$V51,34:$V61,121:$V71}),{13:373,37:$V4,38:$V5},o([2,6,10,16,17,20,21,22,23,24,26,27,28,32,33,34,37,40,45,53,89,90,106,115,116,121,155],[2,256]),o($Vh1,[2,103]),o($Vd1,[2,105],{68:[1,374]}),o($Vd1,[2,108],{68:[1,375]}),o($Vl2,[2,52]),o($Vl2,[2,53]),o($Vd1,[2,107],{68:$Vq2}),{22:$VN,24:$VO,26:$VP,27:$VQ,28:$VR,32:$VS,33:$VT,34:$VU,89:$Vr2,115:$VW,116:$VX,121:$VY},o($Vh1,[2,122]),{90:[1,378]},{22:$V$,24:$V01,26:$V11,27:$V21,28:$V31,32:$V41,33:$V51,34:$V61,90:[1,379],121:$V71},o($Va1,[2,270]),{93:[1,380]},o($Va1,[2,273]),o($VX1,[2,38]),o($VX1,[2,41]),o($Vn1,[2,89]),o($Vs,$V1,{4:381}),o($Vs,$V1,{4:382}),o($V2,$Vt,{99:73,102:81,23:$Vt1,106:$Vu}),o($V2,[2,142]),o($VL,[2,296],{23:$Vt1}),o($VL,[2,299],{23:$Vt1}),o($VL,[2,300],{144:22,114:28,65:35,136:43,134:47,138:48,61:49,140:52,141:53,39:54,44:55,143:56,15:67,88:94,125:100,81:102,67:103,98:383,16:$V8,17:$V9,19:$Vv,20:$Vw,22:$Vc,24:$Vx,31:$VB,40:$VF,45:$VG,53:$Vh,68:$Vi,93:$Vj,115:$VH,118:$Vl,119:$Vm,120:$Vn,127:$VJ,128:$Vp,142:$Vr}),o($VL,[2,301],{144:22,114:28,65:35,136:43,134:47,138:48,61:49,140:52,141:53,39:54,44:55,143:56,15:67,88:94,125:100,81:102,67:103,98:384,16:$V8,17:$V9,19:$Vv,20:$Vw,22:$Vc,24:$Vx,31:$VB,40:$VF,45:$VG,53:$Vh,68:$Vi,93:$Vj,115:$VH,118:$Vl,119:$Vm,120:$Vn,127:$VJ,128:$Vp,142:$Vr}),o($V2,[2,146]),o($V2,[2,153]),o($V2,[2,157]),o($V2,[2,158],{22:$VL1,26:$Vy,27:$Vz,28:$VA,32:$VC,33:$VD,34:$VE,121:$VI}),o($Vs2,[2,156]),o($V2,[2,160],{22:$V$,24:$V01,26:$V11,27:$V21,28:$V31,32:$V41,33:$V51,34:$V61,121:$V71}),o($Vs2,$Vt2,{22:$VN,24:$VO,26:$VP,27:$VQ,28:$VR,32:$VS,33:$VT,34:$VU,115:$VW,116:$VX,121:$VY}),o($V2,$Vt2,{22:$Vu1,24:$Vv1,26:$Vw1,27:$Vx1,28:$Vy1,32:$Vz1,33:$VA1,34:$VB1,116:$VC1,121:$VD1}),{13:387,15:67,16:$V8,17:$V9,37:$V4,38:$V5,50:211,53:$VV,66:208,67:210,70:209,149:385,150:386,151:204,152:205,153:206,154:207},{15:67,16:$V8,17:$V9,53:$Vh,66:208,67:213,149:388,151:204,153:206},o($V02,[2,313]),o($V12,[2,314]),{15:67,16:$V8,17:$V9,38:$VV1,50:310,52:390,53:$VV,67:389},{15:67,16:$V8,17:$V9,53:$Vh,67:391},{15:67,16:$V8,17:$V9,53:$Vh,66:208,67:213,149:385,151:204,153:206},{15:67,16:$V8,17:$V9,53:$Vh,67:392},o($VF1,$V82),o($Vu2,$Va2,{22:$Vu1,24:$Vv1,33:$VA1,116:$VC1}),o($Vu2,$Vc2,{22:$Vu1,24:$Vv1,33:$VA1,116:$VC1}),o($Vu2,$Vd2,{22:$Vu1,24:$Vv1,33:$VA1,116:$VC1}),o($Vu2,$Ve2,{22:$Vu1,24:$Vv1,33:$VA1,116:$VC1}),o($V62,$Vg2,{22:$Vu1,24:$Vv1,26:$Vw1,27:$Vx1,28:$Vy1,33:$VA1,116:$VC1,121:$VD1}),o($V62,$Vh2,{22:$Vu1,24:$Vv1,26:$Vw1,27:$Vx1,28:$Vy1,33:$VA1,116:$VC1,121:$VD1}),o($V72,$Vi2,{116:$VC1}),o($V72,$Vj2,{116:$VC1}),o($V72,$Vk2,{116:$VC1}),{21:$Vm2,23:$Vv2},o($Vw2,$Vo2,{22:$Vu1,24:$Vv1,26:$Vw1,27:$Vx1,28:$Vy1,32:$Vz1,33:$VA1,34:$VB1,116:$VC1,121:$VD1}),{22:$Vu1,24:$Vv1,26:$Vw1,27:$Vx1,28:$Vy1,32:$Vz1,33:$VA1,34:$VB1,89:$Vr2,116:$VC1,121:$VD1},o($Va1,[2,166]),o($Va1,[2,167]),o($Va1,[2,168]),o($Vd1,[2,191]),o($Vd1,[2,192]),o($Vd1,[2,193]),o($Vd1,[2,190]),o($Va1,[2,330]),{2:$VR1,21:$VS1,23:[1,395],54:394},{13:398,15:67,16:$V8,17:$V9,19:$Va,20:$Vb,24:$Vd,31:$Ve,37:$Vb1,38:$V5,39:54,40:$Vf,42:58,44:55,45:$Vg,46:59,53:$Vh,61:49,62:51,65:35,67:57,68:$Vi,81:44,83:46,88:396,91:397,93:$Vj,114:28,115:$Vk,118:$Vl,119:$Vm,120:$Vn,122:34,125:36,127:$Vo,128:$Vp,129:40,130:41,132:$Vq,134:47,136:43,137:45,138:48,139:50,140:52,141:53,142:$Vr,143:56},o($Vd1,[2,331]),o($Vp2,[2,241],{114:28,65:35,136:43,134:47,138:48,61:49,140:52,141:53,39:54,44:55,143:56,15:67,125:100,81:102,67:103,88:357,123:399,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,40:$VF,45:$VG,53:$Vh,68:$Vi,93:$Vj,115:$VH,118:$Vl,119:$Vm,120:$Vn,127:$VJ,128:$Vp,142:$Vr}),o($Vd1,[2,333]),{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:357,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,123:400,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},o($Vp2,[2,242],{23:[1,401]}),{15:67,16:$V8,17:$V9,53:$Vh,61:49,67:103,81:402},{15:67,16:$V8,17:$V9,53:$Vh,61:49,67:103,81:403},{15:67,16:$V8,17:$V9,53:$Vh,61:306,67:103},o($Vh1,[2,121]),o($Vx2,[2,123]),o($Vx2,[2,124]),o($Va1,[2,274]),o($V2,$V3,{9:5,12:7,95:10,5:179,97:$Vq1}),o($V2,$V3,{9:5,12:7,95:10,5:404,97:$Vq1}),o($VL,[2,302],{23:$Vt1}),o($VL,[2,303],{23:$Vt1}),o($V02,[2,305]),o($V$1,[2,308],{23:[1,405]}),o($V$1,[2,310]),o($V$1,[2,307]),o($V22,$Vy2,{69:$Vz2,71:[1,407]}),o($V32,[2,79]),o($V32,[2,78]),o($V32,$Vy2,{69:$Vz2}),{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:408,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},o($Vd1,[2,332]),{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:357,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,123:409,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},o($Vn2,$VA2,{22:$VN,24:$VO,26:$VP,27:$VQ,28:$VR,32:$VS,33:$VT,34:$VU,115:$VW,116:$VX,121:$VY}),o($Vp2,[2,234],{22:$V$,23:[1,410],24:$V01,26:$V11,27:$V21,28:$V31,32:$V41,33:$V51,34:$V61,121:$V71}),o($Vp2,[2,237],{23:[1,411]}),o($Vp2,[2,240],{23:$Vv2}),o($Vp2,[2,235],{23:$Vv2}),{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:357,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,123:412,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},o($Vd1,[2,106],{68:$Vq2}),o($Vd1,[2,109],{68:$Vq2}),{6:[2,11],10:$VY1},{15:67,16:$V8,17:$V9,53:$Vh,66:208,67:213,107:413,149:202,151:204,153:206},o($V22,[2,76]),o($V32,[2,80]),o($Vw2,$VA2,{22:$Vu1,24:$Vv1,26:$Vw1,27:$Vx1,28:$Vy1,32:$Vz1,33:$VA1,34:$VB1,116:$VC1,121:$VD1}),o($Vp2,[2,239],{23:$Vv2}),{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:357,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,123:414,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},{15:67,16:$V8,17:$V9,19:$Vv,20:$Vw,24:$Vx,31:$VB,39:54,40:$VF,44:55,45:$VG,53:$Vh,61:49,65:35,67:103,68:$Vi,81:102,88:357,93:$Vj,114:28,115:$VH,118:$Vl,119:$Vm,120:$Vn,123:415,125:100,127:$VJ,128:$Vp,134:47,136:43,138:48,140:52,141:53,142:$Vr,143:56},o($Vp2,[2,243],{23:$Vv2}),o($V$1,[2,309],{23:$V52}),o($Vp2,[2,236],{23:$Vv2}),o($Vp2,[2,238],{23:$Vv2})],
defaultActions: {15:[2,2],17:[2,3]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: lexer.yylloc,
                    ruleId: stack.slice(stack.length - 2, stack.length).join('_'),
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


SqlParseSupport.initSqlParser(parser);/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true,"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* skip whitespace */ 
break;
case 1: /* skip comments */ 
break;
case 2: /* skip comments */ 
break;
case 3: parser.yy.partialCursor = false; parser.yy.cursorFound = yy_.yylloc; return 37; 
break;
case 4: parser.yy.partialCursor = true; parser.yy.cursorFound = yy_.yylloc; return 38; 
break;
case 5: return 32; 
break;
case 6: return 155; 
break;
case 7: return 120; 
break;
case 8: parser.determineCase(yy_.yytext); return 106; 
break;
case 9: return 116; 
break;
case 10: return 115; 
break;
case 11: return 118; 
break;
case 12: return 34; 
break;
case 13: parser.determineCase(yy_.yytext); parser.addStatementTypeLocation('SELECT', yy_.yylloc); return 97; 
break;
case 14: return 119; 
break;
case 15: return 35; 
break;
case 16: return 93; 
break;
case 17: return 93; 
break;
case 18: return 142; 
break;
case 19: return 16; 
break;
case 20: return 32; 
break;
case 21: return 34; 
break;
case 22: return 27; 
break;
case 23: return 26; 
break;
case 24: return 28; 
break;
case 25: return 121; 
break;
case 26: return 121; 
break;
case 27: return 121; 
break;
case 28: return 121; 
break;
case 29: return 121; 
break;
case 30: return 24; 
break;
case 31: return 22; 
break;
case 32: return 33; 
break;
case 33: return 33; 
break;
case 34: return 33; 
break;
case 35: return 33; 
break;
case 36: return 33; 
break;
case 37: return 33; 
break;
case 38: return 23; 
break;
case 39: return 25; 
break;
case 40: return ':'; 
break;
case 41: return 10; 
break;
case 42: return 31; 
break;
case 43: return 19; 
break;
case 44: return 20; 
break;
case 45: return 21; 
break;
case 46: return 29; 
break;
case 47: return 30; 
break;
case 48: this.begin('backtickedValue'); return 53; 
break;
case 49:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '`')) {
                                               return 43;
                                             }
                                             return 41;
                                           
break;
case 50: this.popState(); return 53; 
break;
case 51: this.begin('singleQuotedValue'); return 40; 
break;
case 52:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '\'')) {
                                               return 43;
                                             }
                                             return 41;
                                           
break;
case 53: this.popState(); return 40; 
break;
case 54: this.begin('doubleQuotedValue'); return 45; 
break;
case 55:
                                             if (parser.handleQuotedValueWithCursor(this, yy_.yytext, yy_.yylloc, '"')) {
                                               return 43;
                                             }
                                             return 41;
                                           
break;
case 56: this.popState(); return 45; 
break;
case 57: return 6; 
break;
case 58: /* To prevent console logging of unknown chars */ 
break;
case 59: 
break;
case 60: 
break;
case 61: 
break;
case 62:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s)/i,/^(?:--.*)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:\u2020)/i,/^(?:\u2021)/i,/^(?:AND)/i,/^(?:AS)/i,/^(?:FALSE)/i,/^(?:FROM)/i,/^(?:IS)/i,/^(?:NOT)/i,/^(?:NULL)/i,/^(?:OR)/i,/^(?:SELECT)/i,/^(?:TRUE)/i,/^(?:WHERE)/i,/^(?:[0-9]+)/i,/^(?:[0-9]+(?:[YSL]|BD)?)/i,/^(?:[0-9]+E)/i,/^(?:[A-Za-z0-9_]+)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<>)/i,/^(?:<=>)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\+)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\|)/i,/^(?:\^)/i,/^(?:&)/i,/^(?:,)/i,/^(?:\.)/i,/^(?::)/i,/^(?:;)/i,/^(?:~)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:`)/i,/^(?:[^`]+)/i,/^(?:`)/i,/^(?:')/i,/^(?:(?:\\\\|\\[']|[^'])+)/i,/^(?:')/i,/^(?:")/i,/^(?:(?:\\\\|\\["]|[^"])+)/i,/^(?:")/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"doubleQuotedValue":{"rules":[55,56,61],"inclusive":false},"singleQuotedValue":{"rules":[52,53,60],"inclusive":false},"backtickedValue":{"rules":[49,50,59],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,54,57,58,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
export default customSqlAutocompleteParser;
